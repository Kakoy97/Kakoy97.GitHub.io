---
layout:     post
title:      "「观察者模式」气象站"
subtitle:   "Obeserver"
date:       2021-10-18 22:36:00
author:     "Kakoy"
header-img: "img/2021-bg.jpg"
catalog: true
tags:
    - 设计模式
---

> “ 观察者模式 ”

## 问题
一个气象站要求将数据层(WeatherData)对象更新时,我们需要更新三个布告板:目前情况,气象统计,天气预报。我们该如何设计？
weatherData里给我们提供了几个接口，让我们来看看
```cs
public class WeatherData
{
    getTemperature();//获取温度
    getHumidity();//获取湿度
    getPressure();//获取气压
    mentsChanged();//一旦气象测量更新,此方法会被调用到
}
```

## 错误示例
```cs
public class WeatherData
{
    float tem = getTemperature();//获取温度
    float hum = getHumidity();//获取湿度
    float press = getPressure();//获取气压
    mentsChanged(){
        xxx1.upData(tem,hum,press) //目前情况布告板
        xxx2.upData(tem,hum,press) //气象统计布告板
        xxx3.upData(tem,hum,press) //天气预报布告板

    };//一旦气象测量更新,此方法会被调用到
}
```
以上代码会导致有个问题:针对具体情况进行编程,会导致我们在以后增加或删除布告板时必须修改程序

## 举例介绍观察者模式
1.报社的业务就是出版报纸。<br>
2.向某家报社订阅报纸,只要他们有新报纸出版,就会给你送来。只要你时他们的订户,你就会一直收到新报纸。<br>
3.当你不想再看报纸的时候,取消订阅,他们就不会再送新报纸来。<br>
4.只要报社还在运营,就会一直有人(或单位)向他们订阅报纸或取消订阅报纸。<br>

## 示意图
![img](/img/headFirst/Observe01.jpg)

## 示例代码

```cs
//主题接口
public interface Subject 
{
    void RegisterObserver(Observer o);
    void RemoveObserver(Observer o);
    void NotifyObserver();
}

//观察者更新接口
public interface Observer 
{
    void UpdateInfo(WeatherInfo weatherInfo);
}

//观察者显示接口
public interface DisplayElement
{
    void Display();
}


```
除此之外我还创造了一个存放天气信息的对象
```cs
public class WeatherInfo
{
    //温度
    private float temp;
    //湿度
    private float humi;
    //气压
    private float press;

    public float Temp
    {
        get{ return temp;}
        set{ temp = value;}
    }

    public float Humi
    {
        get{ return humi;}
        set{ humi = value;}
    }

    public float Press
    {
        get{ return press;}
        set{ press = value;}
    }
}

```
实现类
首先是我们的weatherData(数据层),重写注册和移除还有更新这三个接口
```cs
public class WeatherData : Subject
{
    private ArrayList arr;
    private WeatherInfo weatherInfo;

    public WeatherData()
    {
        arr = new ArrayList();
    }
    public void NotifyObserver()
    {

        for(int i = 0; i<arr.Count; i++)
        {
            Observer observer = (Observer)arr[i];
            observer.UpdateInfo(weatherInfo);
        }
    }

    public void RegisterObserver(Observer o)
    {
        arr.Add(o);
    }

    public void RemoveObserver(Observer o)
    {
        int index = arr.IndexOf(o);
        if(index >= 0){
            arr.RemoveAt(index);
        }
    }

    public void SetWeatherInfo(WeatherInfo weatherInfo)
    {
        this.weatherInfo = weatherInfo;
        NotifyObserver();
    }

}

```
接着是我们的观察者们
```cs
//观察者1号
public class Observer1 : Observer,DisplayElement
{
    private WeatherInfo weatherInfo;
    private Subject weatherData;

    public Observer1(Subject weatherData)
    {
        this.weatherData = weatherData;
        weatherData.RegisterObserver(this);
    }

    public void Display()
    {
        Debug.Log("今天温度:" + weatherInfo.Temp + " 湿度:" + weatherInfo.Humi + " 气压:" + weatherInfo.Press);
    }
    public void UpdateInfo(WeatherInfo weatherInfo)
    {
        this.weatherInfo = weatherInfo;
        Display();
    }
}

//观察者2号
public class Observer2 : Observer, DisplayElement
{
    private WeatherInfo weatherInfo;
    private Subject weatherData;

    public Observer2(Subject weatherData)
    {
        this.weatherData = weatherData;
        weatherData.RegisterObserver(this);
    }

    public void Display()
    {
        Debug.Log("今天温度:" + weatherInfo.Temp + " 湿度:" + weatherInfo.Humi);
    }
    public void UpdateInfo(WeatherInfo weatherInfo)
    {
        this.weatherInfo = weatherInfo;
        Display();
    }
}
```
最后看看我们的main方法和执行结果
```cs
public class Main2 : MonoBehaviour
{
    void Start()
    {
       WeatherData weatherData = new WeatherData();
        Observer observer1 = new Observer1(weatherData);
        Observer observer2 = new Observer2(weatherData);
        WeatherInfo weatherInfo = new WeatherInfo();
        weatherInfo.Temp = 30;
        weatherInfo.Humi = 20;
        weatherInfo.Press = 10;
        weatherData.SetWeatherInfo(weatherInfo);
        weatherData.RemoveObserver(observer1);
        weatherData.SetWeatherInfo(weatherInfo);
    }
}
```
![img](/img/headFirst/Observe02.jpg)

## 总结
1.观察者模式定义了对象之间一对多的关系。<br>
2.主题(也就是可观察者)用共同的接口来更新观察者<br>
3.观察者和可观察者之间松耦合方式结合，可观察者不知道观察者的细节，只知道观察者实现了观察者接口(update)<br>
4.有多个观察者时,不可以依赖特定的通知次序。<br>
5.Java有多种观察者模式的实现,包括通用的Java.util.Observable。<br>
